---
import type { GetStaticPaths } from "astro";
import { sanityClient } from "sanity:client";
import { urlForImage } from "../../sanity/urlForImage";
import { type Image } from "@sanity/types";
import type { PrototypeSchema, Tag } from "../../utils/sanity";

import LargeCTACard from "../../components/LargeCTACard.astro";
import ActionsSection from "../../components/Prototype/ActionsSection.astro";
import Goals from "../../components/Prototype/Goals.astro";
import Summary from "../../components/Prototype/Summary.astro";
import TechStack from "../../components/Prototype/TechStack.astro";
import ImageAndDetail from "../../components/ImageDetail.astro";
import Testimonies from "../../components/Prototype/Testimonies.astro";
import VideoView from "../../components/VideoView.astro";
import PortableText from "../../components/PortableText/PortableText.astro";
import Prototype from "../../layouts/Prototype.astro";

export const prerender = false;

Astro.response.headers.set('Cache-Control', 'public, max-age=0');

const { slug } = Astro.params;

const groq = `*[_type == "prototype" && slug.current == $slug] {
    ..., 
    summary {
      ...,
      contributors[]->,
    },
    tags[]->
}[0]`;

export const getStaticPaths = (() => {
    return {
        params: { slug: prototype.slug.current }
    };
});

const prototype: PrototypeSchema = await sanityClient.fetch(groq, { slug: slug });
const heroImageUrls = prototype.heroImageAssets.map((asset: Image) => urlForImage(asset).url())
const tagImgs = prototype.tags.map((tag: Tag) => tag.icon);
const tagIcons = tagImgs.map((icon: Image) => urlForImage(icon).url());
---

<Prototype
  name={prototype.prototypeName}
  title={prototype.title} slug={prototype.slug.current} subtitle={prototype.subtitle} keywords={prototype.keywords}
  heroSrcArray={heroImageUrls}>

  <Summary icons={tagIcons} technologies={prototype.summary.technologies} 
  tools={prototype.summary.tools} features={prototype.summary.keyFeatures} contributors={prototype.summary.contributors} />

  <Goals title={prototype.goals.heading} goals={prototype.goals.goals} />

  <ActionsSection actions={prototype.actions} />

  {prototype.techStack ? <TechStack stack={prototype.techStack} /> : null}

  {prototype.videoUrl ? <VideoView src={prototype.videoUrl.toString()} /> : null}

  <ImageAndDetail title={prototype.useCases.title} prototypeName={prototype.prototypeName} 
    useCases={prototype.useCases.useCases} />

  {prototype.testimonies ? <Testimonies testimonies={prototype.testimonies} /> : null}

  {prototype.tryItOut ? 
  <LargeCTACard href={prototype.tryItOut.link.toString()} bgColor='bg-slate-700'>
        {prototype.tryItOut.icon ? <img src={urlForImage(prototype.tryItOut.icon).url()} class="w-52 rounded-full mx-auto m-8"> : null}
        <h1 class="text-4xl transition duration-300 ease-in-out">{prototype.tryItOut.heading}</h1>
        <PortableText portableText={prototype.tryItOut.content} />
        {prototype.tryItOut.includeAppStoreBadge ? <img src="/AppStoreBadge.svg" class="mx-auto w-40"> : null}
  </LargeCTACard> : null
  }
</Prototype>
