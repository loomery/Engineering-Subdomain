---
import { sanityClient } from "sanity:client";
import { type Image } from "@sanity/types";
import { urlForImage } from "../../sanity/urlForImage";
import { type PrototypeSchema, type Tag } from "../../utils/sanity";

import Prototype from "../../layouts/Prototype.astro";
import Summary from "../../components/Prototype/Summary.astro";
import Goals from "../../components/Prototype/Goals.astro";
import ActionsSection from "../../components/Prototype/ActionsSection.astro";
import VideoView from "../../components/VideoView.astro";
import ImageAndDetail from "../../components/ImageDetail.astro";
import Testimonies from "../../components/Prototype/Testimonies.astro";
import LargeCTACard from "../../components/LargeCTACard.astro";
import TechStack from "../../components/Prototype/TechStack.astro";
import { toPlainText } from "astro-portabletext/utils";
import Slideshow from "../../components/Slideshow.astro";
import Break from "../../components/Break.astro";

export const prerender = true;

export async function getStaticPaths() {
const groq = `
*[_type == "prototype"]{
...,
summary {
...,
contributors[]->,
},
tags[]->
}
`;

const prototypes = await sanityClient.fetch(groq);

return prototypes.map((prototype: PrototypeSchema) => {
const heroImageUrls = prototype.heroImageAssets.map((asset: Image) => urlForImage(asset).url())
// const tagImgs = prototype.tags.map((tag: Tag) => tag.icon);
// const tagIcons = tagImgs.map((icon: Image) => urlForImage(icon).url());

return {
params: { slug: prototype.slug.current },
props: { prototype, heroImageUrls },
};
});
}

const { slug } = Astro.params;
const { prototype, heroImageUrls }: {
prototype: PrototypeSchema,
heroImageUrls: string[],
} = Astro.props;
---

<Prototype name={prototype.prototypeName} slug={slug} excerpt={toPlainText(prototype.excerpt)}
  keywords={prototype.keywords} heroSrcArray={heroImageUrls}>

  <section class="space-y-12 mt-24">
    <div class="grid grid-cols-1 lg:grid-cols-3 gap-4">
      <div class="lg:col-span-2 space-y-4">
        <h1 class="text-5xl font-light leading-normal">{prototype.title}</span></h1>
        <h1 class="text-2xl font-light">{prototype.subtitle}</h1>

        <div class="space-x-2 font-light">
          {prototype.tags.map((tag) => (
          <span class="text-xs px-2 rounded-full ring-1 ring-bg-light inline-block my-1">
            {"# " + tag.title.toLocaleLowerCase().replace(/\s/g, "-")}
          </span>
          ))}
        </div>
      </div>
    </div>

    <Slideshow imageUrls={heroImageUrls} />
  </section>

  <Break />

  <Summary technologies={prototype.summary.technologies} tools={prototype.summary.tools}
    features={prototype.summary.keyFeatures} contributors={prototype.summary.contributors} />

  <Break />

  <Goals title={prototype.goals.heading} goals={prototype.goals.goals} />

  <Break />

  <ActionsSection actions={prototype.actions} />

  <Break />

  {prototype.techStack ?
  <TechStack stack={prototype.techStack} /> <Break />: null}

  {prototype.videoUrl ?
  <VideoView src={prototype.videoUrl.toString()} /> <Break /> : null}

  <ImageAndDetail title={prototype.useCases.title}
    useCases={prototype.useCases.useCases} />

  {prototype.testimonies ? <Break />
  <Testimonies testimonies={prototype.testimonies} /> : null}

  {prototype.tryItOut ? <Break />
  <LargeCTACard tryItOutObject={prototype.tryItOut} /> 
  : null
  }
</Prototype>