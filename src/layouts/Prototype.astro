---
import Footer from '../components/Footer.astro';
import LargeCTACard from '../components/LargeCTACard.astro';
import NavBar from '../components/NavBar.astro';

interface Props {
slug: string;
name: string;
title: string;
subtitle: string;
keywords: string;
heroSrcArray: string[];
}

const {
slug,
name,
title,
subtitle,
keywords,
heroSrcArray,
} = Astro.props;
---

<!doctype html>
<html lang="en">

<head>
	<meta charset="UTF-8" />
	<meta name="description" content={subtitle} />
	<meta name="viewport" content="width=device-width" />
	<link rel="icon" type="image/png" href="/favicon.png" />
	<link rel="stylesheet" href="/global.css" />
	<meta name="generator" content={Astro.generator} />
	<title>{name} | Loomery Lab</title>

	<!-- Open Graph / Facebook -->
	<meta property="og:type" content="website" />
	<meta property="og:url" content={`https://lab.loomery.com/prototypes/${slug}`} />
	<meta property="og:title" content={name + " | Loomery Lab"} />
	<meta
      name="keywords"
	content={keywords + ", Loomery, Loomery Lab, Loomery Prototypes, Loomery Technologies, Loomery Experimentation, Emerging Technologies, Loomery Innovation"}
    />
	<meta property="og:description" content={subtitle} />
	<meta property="og:image" content={heroSrcArray[0]} />

	<!-- Twitter -->
	<meta property="twitter:card" content="summary_large_image" />
	<meta property="twitter:url" content={`https://lab.loomery.com/prototypes/${slug}`} />
	<meta property="twitter:title" content={name + " | Loomery Lab"} />
	<meta property="twitter:description" content={subtitle} />
	<meta property="twitter:image" content={heroSrcArray[0]} />

	<!-- Google Tag Manager -->
	<script>
		// @ts-ignore
		(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
			new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
			// @ts-ignore
			j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
			// @ts-ignore
			'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
		})(window,document,'script','dataLayer','GTM-N2FSBCL');
	</script>
	<!-- End Google Tag Manager -->
</head>

<body>
	<div id="hero" class="hero bg-cover bg-center h-[100vh] md:h-[90vh] md:bg-fixed"
		data-hero-images={JSON.stringify(heroSrcArray)}>
		<NavBar />

		<section
			class="flex flex-col items-center text-center space-y-12 p-24 w-full absolute bottom-0 bg-gradient-to-t from-bg-dark">
			<h1 class="max-w-4xl text-3xl lg:text-7xl">{title}</h1>
			<h2 class="max-w-4xl text-xl lg:text-3xl">{subtitle}</h2>
		</section>
	</div>

	<main class="m-8 space-y-48 mb-32 md:px-32 md:py-16 max-w-7xl xl:mx-auto">
		<slot />

		<LargeCTACard href="https://www.loomery.com/contact-us" bgColor="bg-brand-dark">
			<h1 class="text-3xl">Ready for a chat?</h1>
			<p class="text-xl">Loomery can help you build great products with cutting edge tools and technologies like this!</p>
		</LargeCTACard>

		<section class="text-center space-y-4 flex flex-col items-center px-4 md:px-0">
			<h1 class="text-3xl">Follow Loomery</h1>
			<p class="text-xl max-w-3xl">Stay in the loop by following us on social media, and subscribing to our
				newsletter:</p>

			<div class="text-accent space-x-4 md:space-x-20 p-8 flex flex-col md:flex-row justify-center items-center">
				<a target="_blank" href="https://www.linkedin.com/company/loomery"
					class="text-2xl mb-4 md:mb-0 flex items-center">
					LinkedIn
					<img src="/chevron.right.svg" class="h-6 ml-2 inline-block">
				</a>
				<a target="_blank" href="https://twitter.com/loomeryteam"
					class="text-2xl mb-4 md:mb-0 flex items-center">
					Twitter
					<img src="/chevron.right.svg" class="h-6 ml-2 inline-block">
				</a>
				<a target="_blank" href="https://www.loomery.com/newsletter" 
					class="text-2xl flex items-center">
					Newsletter
					<img src="/chevron.right.svg" class="h-6 ml-2 inline-block">
				</a>
			</div>
		</section>
	</main>

	<Footer />

	<script>
		document.addEventListener('DOMContentLoaded', function () {
			const heroSection = document.getElementById('hero');
			if (!heroSection) {
				console.error('Hero section not found');
				return; // Exit if hero section is not found
			}

			const heroImagesAttribute = heroSection.getAttribute('data-hero-images');
			if (!heroImagesAttribute) {
				console.error('data-hero-images attribute is missing');
				return; // Exit if the attribute is not found
			}

			let images: string[];
			try {
				images = JSON.parse(heroImagesAttribute);
				if (!Array.isArray(images) || images.length === 0) {
					throw new Error('Parsed data is not a non-empty array');
				}
			} catch (error) {
				console.error('Error parsing data-hero-images:', error);
				return; // Exit if parsing fails or data is not as expected
			}

			if (!(images.length >= 1)) {
				// If there is only one image, set it as the background image
				heroSection.style.backgroundImage = `url('${images[0]}')`;
				return; // Exit early if there is only one image
			}

			// Proceed with the assumption that `images` is a non-empty array of strings
			const imageContainers: HTMLElement[] = images.slice(0, images.length).map((src, index) => {
				const div = document.createElement('div');
				div.className = 'hero-image';
				div.style.backgroundImage = `url('${src}')`;
				if (window.matchMedia("(min-width: 768px)").matches) {
					div.style.backgroundAttachment = 'fixed'; // Add this line
				}
				div.style.opacity = index === 0 ? '1' : '0'; // Show the first image immediately
				heroSection.appendChild(div);
				return div;
			});

			let currentIndex = 0;

			function changeImage() {
				currentIndex = (currentIndex + 1) % images.length;
				const nextImageIndex = (currentIndex + 1) % images.length;
				const nextContainerIndex = (currentIndex + 1) % imageContainers.length;
				imageContainers[nextContainerIndex].style.backgroundImage =
					`url('${images[nextImageIndex]}')`;

				// Cross-fade effect
				imageContainers.forEach((container, index) => {
					container.style.opacity = index === nextContainerIndex ? '1' : '0';
				});

			};

			// Call changeImage immediately for the first transition, with a shorter delay
			// setTimeout(changeImage, 1000); // Adjust this delay for the first image change as needed

			// Then set up the interval for subsequent changes
			setInterval(changeImage, 5000); // Continue changing images every 5 seconds
		});
	</script>

	<script src="../js/main"></script>
</body>

</html>

<style is:global>
	:root {
		--accent: #52A894;
	}

	html {
		background: #141414;
		color: #FFFFFF;
	}

	code {
		font-family:
			Menlo,
			Monaco,
			Lucida Console,
			Liberation Mono,
			DejaVu Sans Mono,
			Bitstream Vera Sans Mono,
			Courier New,
			monospace;
	}

	.hero {
		position: relative;
		/* Adjust based on your needs */
		overflow: hidden;
	}

	.hero-image {
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		background-size: cover;
		background-position: center;
		transition: opacity 2s ease-in-out;
		/* Smooth transition */
		opacity: 0;
		/* Start fully transparent */
		z-index: -1;
		/* Ensure it stays in the background */
	}
</style>